// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oda.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "oda.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace oda {

namespace {

const ::google::protobuf::Descriptor* Proposal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proposal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reviewer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reviewer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Oda_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Oda_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_oda_2eproto() {
  protobuf_AddDesc_oda_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "oda.proto");
  GOOGLE_CHECK(file != NULL);
  Proposal_descriptor_ = file->message_type(0);
  static const int Proposal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposal, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposal, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposal, reviewer_),
  };
  Proposal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proposal_descriptor_,
      Proposal::default_instance_,
      Proposal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proposal));
  Reviewer_descriptor_ = file->message_type(1);
  static const int Reviewer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reviewer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reviewer, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reviewer, name_),
  };
  Reviewer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reviewer_descriptor_,
      Reviewer::default_instance_,
      Reviewer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reviewer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reviewer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reviewer));
  Oda_descriptor_ = file->message_type(2);
  static const int Oda_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Oda, proposal_),
  };
  Oda_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Oda_descriptor_,
      Oda::default_instance_,
      Oda_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Oda, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Oda, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Oda));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_oda_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proposal_descriptor_, &Proposal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reviewer_descriptor_, &Reviewer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Oda_descriptor_, &Oda::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_oda_2eproto() {
  delete Proposal::default_instance_;
  delete Proposal_reflection_;
  delete Reviewer::default_instance_;
  delete Reviewer_reflection_;
  delete Oda::default_instance_;
  delete Oda_reflection_;
}

void protobuf_AddDesc_oda_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\toda.proto\022\003oda\"F\n\010Proposal\022\n\n\002id\030\001 \002(\005"
    "\022\r\n\005title\030\002 \002(\t\022\037\n\010reviewer\030\003 \003(\0132\r.oda."
    "Reviewer\"3\n\010Reviewer\022\n\n\002id\030\001 \002(\005\022\r\n\005grad"
    "e\030\002 \002(\t\022\014\n\004name\030\003 \002(\t\"&\n\003Oda\022\037\n\010proposal"
    "\030\001 \003(\0132\r.oda.Proposal", 181);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "oda.proto", &protobuf_RegisterTypes);
  Proposal::default_instance_ = new Proposal();
  Reviewer::default_instance_ = new Reviewer();
  Oda::default_instance_ = new Oda();
  Proposal::default_instance_->InitAsDefaultInstance();
  Reviewer::default_instance_->InitAsDefaultInstance();
  Oda::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_oda_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_oda_2eproto {
  StaticDescriptorInitializer_oda_2eproto() {
    protobuf_AddDesc_oda_2eproto();
  }
} static_descriptor_initializer_oda_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Proposal::kIdFieldNumber;
const int Proposal::kTitleFieldNumber;
const int Proposal::kReviewerFieldNumber;
#endif  // !_MSC_VER

Proposal::Proposal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:oda.Proposal)
}

void Proposal::InitAsDefaultInstance() {
}

Proposal::Proposal(const Proposal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:oda.Proposal)
}

void Proposal::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proposal::~Proposal() {
  // @@protoc_insertion_point(destructor:oda.Proposal)
  SharedDtor();
}

void Proposal::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void Proposal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proposal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proposal_descriptor_;
}

const Proposal& Proposal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oda_2eproto();
  return *default_instance_;
}

Proposal* Proposal::default_instance_ = NULL;

Proposal* Proposal::New() const {
  return new Proposal;
}

void Proposal::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
  }
  reviewer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proposal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oda.Proposal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // required string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reviewer;
        break;
      }

      // repeated .oda.Reviewer reviewer = 3;
      case 3: {
        if (tag == 26) {
         parse_reviewer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reviewer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reviewer;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oda.Proposal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oda.Proposal)
  return false;
#undef DO_
}

void Proposal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oda.Proposal)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // repeated .oda.Reviewer reviewer = 3;
  for (int i = 0; i < this->reviewer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reviewer(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oda.Proposal)
}

::google::protobuf::uint8* Proposal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oda.Proposal)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // repeated .oda.Reviewer reviewer = 3;
  for (int i = 0; i < this->reviewer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reviewer(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oda.Proposal)
  return target;
}

int Proposal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  // repeated .oda.Reviewer reviewer = 3;
  total_size += 1 * this->reviewer_size();
  for (int i = 0; i < this->reviewer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reviewer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proposal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proposal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proposal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proposal::MergeFrom(const Proposal& from) {
  GOOGLE_CHECK_NE(&from, this);
  reviewer_.MergeFrom(from.reviewer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proposal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proposal::CopyFrom(const Proposal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reviewer())) return false;
  return true;
}

void Proposal::Swap(Proposal* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    reviewer_.Swap(&other->reviewer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proposal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proposal_descriptor_;
  metadata.reflection = Proposal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Reviewer::kIdFieldNumber;
const int Reviewer::kGradeFieldNumber;
const int Reviewer::kNameFieldNumber;
#endif  // !_MSC_VER

Reviewer::Reviewer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:oda.Reviewer)
}

void Reviewer::InitAsDefaultInstance() {
}

Reviewer::Reviewer(const Reviewer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:oda.Reviewer)
}

void Reviewer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  grade_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reviewer::~Reviewer() {
  // @@protoc_insertion_point(destructor:oda.Reviewer)
  SharedDtor();
}

void Reviewer::SharedDtor() {
  if (grade_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grade_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Reviewer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reviewer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reviewer_descriptor_;
}

const Reviewer& Reviewer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oda_2eproto();
  return *default_instance_;
}

Reviewer* Reviewer::default_instance_ = NULL;

Reviewer* Reviewer::New() const {
  return new Reviewer;
}

void Reviewer::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = 0;
    if (has_grade()) {
      if (grade_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        grade_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reviewer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oda.Reviewer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_grade;
        break;
      }

      // required string grade = 2;
      case 2: {
        if (tag == 18) {
         parse_grade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grade()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grade().data(), this->grade().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grade");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oda.Reviewer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oda.Reviewer)
  return false;
#undef DO_
}

void Reviewer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oda.Reviewer)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grade().data(), this->grade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grade");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->grade(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oda.Reviewer)
}

::google::protobuf::uint8* Reviewer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oda.Reviewer)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grade().data(), this->grade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grade");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->grade(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oda.Reviewer)
  return target;
}

int Reviewer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grade());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reviewer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reviewer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reviewer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reviewer::MergeFrom(const Reviewer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reviewer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reviewer::CopyFrom(const Reviewer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reviewer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Reviewer::Swap(Reviewer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(grade_, other->grade_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reviewer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reviewer_descriptor_;
  metadata.reflection = Reviewer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Oda::kProposalFieldNumber;
#endif  // !_MSC_VER

Oda::Oda()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:oda.Oda)
}

void Oda::InitAsDefaultInstance() {
}

Oda::Oda(const Oda& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:oda.Oda)
}

void Oda::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Oda::~Oda() {
  // @@protoc_insertion_point(destructor:oda.Oda)
  SharedDtor();
}

void Oda::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Oda::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Oda::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Oda_descriptor_;
}

const Oda& Oda::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oda_2eproto();
  return *default_instance_;
}

Oda* Oda::default_instance_ = NULL;

Oda* Oda::New() const {
  return new Oda;
}

void Oda::Clear() {
  proposal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Oda::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oda.Oda)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .oda.Proposal proposal = 1;
      case 1: {
        if (tag == 10) {
         parse_proposal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proposal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_proposal;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oda.Oda)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oda.Oda)
  return false;
#undef DO_
}

void Oda::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oda.Oda)
  // repeated .oda.Proposal proposal = 1;
  for (int i = 0; i < this->proposal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->proposal(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oda.Oda)
}

::google::protobuf::uint8* Oda::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oda.Oda)
  // repeated .oda.Proposal proposal = 1;
  for (int i = 0; i < this->proposal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->proposal(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oda.Oda)
  return target;
}

int Oda::ByteSize() const {
  int total_size = 0;

  // repeated .oda.Proposal proposal = 1;
  total_size += 1 * this->proposal_size();
  for (int i = 0; i < this->proposal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proposal(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Oda::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Oda* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Oda*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Oda::MergeFrom(const Oda& from) {
  GOOGLE_CHECK_NE(&from, this);
  proposal_.MergeFrom(from.proposal_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Oda::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Oda::CopyFrom(const Oda& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Oda::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->proposal())) return false;
  return true;
}

void Oda::Swap(Oda* other) {
  if (other != this) {
    proposal_.Swap(&other->proposal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Oda::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Oda_descriptor_;
  metadata.reflection = Oda_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace oda

// @@protoc_insertion_point(global_scope)

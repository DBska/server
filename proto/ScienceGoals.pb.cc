// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ScienceGoals.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ScienceGoals.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ScienceGoals_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScienceGoals_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ScienceGoals_2eproto() {
  protobuf_AddDesc_ScienceGoals_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ScienceGoals.proto");
  GOOGLE_CHECK(file != NULL);
  ScienceGoals_descriptor_ = file->message_type(0);
  static const int ScienceGoals_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceGoals, frequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceGoals, instrument_configurations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceGoals, more_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceGoals, target_details_),
  };
  ScienceGoals_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScienceGoals_descriptor_,
      ScienceGoals::default_instance_,
      ScienceGoals_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceGoals, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceGoals, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScienceGoals));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ScienceGoals_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScienceGoals_descriptor_, &ScienceGoals::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ScienceGoals_2eproto() {
  delete ScienceGoals::default_instance_;
  delete ScienceGoals_reflection_;
}

void protobuf_AddDesc_ScienceGoals_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ScienceGoals.proto\"o\n\014ScienceGoals\022\021\n\t"
    "frequence\030\001 \001(\001\022!\n\031instrument_configurat"
    "ions\030\002 \001(\t\022\021\n\tmore_info\030\003 \001(\t\022\026\n\016target_"
    "details\030\004 \001(\t", 133);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ScienceGoals.proto", &protobuf_RegisterTypes);
  ScienceGoals::default_instance_ = new ScienceGoals();
  ScienceGoals::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ScienceGoals_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ScienceGoals_2eproto {
  StaticDescriptorInitializer_ScienceGoals_2eproto() {
    protobuf_AddDesc_ScienceGoals_2eproto();
  }
} static_descriptor_initializer_ScienceGoals_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ScienceGoals::kFrequenceFieldNumber;
const int ScienceGoals::kInstrumentConfigurationsFieldNumber;
const int ScienceGoals::kMoreInfoFieldNumber;
const int ScienceGoals::kTargetDetailsFieldNumber;
#endif  // !_MSC_VER

ScienceGoals::ScienceGoals()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScienceGoals)
}

void ScienceGoals::InitAsDefaultInstance() {
}

ScienceGoals::ScienceGoals(const ScienceGoals& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ScienceGoals)
}

void ScienceGoals::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  frequence_ = 0;
  instrument_configurations_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  more_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_details_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScienceGoals::~ScienceGoals() {
  // @@protoc_insertion_point(destructor:ScienceGoals)
  SharedDtor();
}

void ScienceGoals::SharedDtor() {
  if (instrument_configurations_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instrument_configurations_;
  }
  if (more_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete more_info_;
  }
  if (target_details_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_details_;
  }
  if (this != default_instance_) {
  }
}

void ScienceGoals::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScienceGoals::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScienceGoals_descriptor_;
}

const ScienceGoals& ScienceGoals::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScienceGoals_2eproto();
  return *default_instance_;
}

ScienceGoals* ScienceGoals::default_instance_ = NULL;

ScienceGoals* ScienceGoals::New() const {
  return new ScienceGoals;
}

void ScienceGoals::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    frequence_ = 0;
    if (has_instrument_configurations()) {
      if (instrument_configurations_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        instrument_configurations_->clear();
      }
    }
    if (has_more_info()) {
      if (more_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        more_info_->clear();
      }
    }
    if (has_target_details()) {
      if (target_details_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_details_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScienceGoals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScienceGoals)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double frequence = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequence_)));
          set_has_frequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_instrument_configurations;
        break;
      }

      // optional string instrument_configurations = 2;
      case 2: {
        if (tag == 18) {
         parse_instrument_configurations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_configurations()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instrument_configurations().data(), this->instrument_configurations().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "instrument_configurations");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_more_info;
        break;
      }

      // optional string more_info = 3;
      case 3: {
        if (tag == 26) {
         parse_more_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_more_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->more_info().data(), this->more_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "more_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_target_details;
        break;
      }

      // optional string target_details = 4;
      case 4: {
        if (tag == 34) {
         parse_target_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_details()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_details().data(), this->target_details().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target_details");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScienceGoals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScienceGoals)
  return false;
#undef DO_
}

void ScienceGoals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScienceGoals)
  // optional double frequence = 1;
  if (has_frequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->frequence(), output);
  }

  // optional string instrument_configurations = 2;
  if (has_instrument_configurations()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrument_configurations().data(), this->instrument_configurations().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instrument_configurations");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->instrument_configurations(), output);
  }

  // optional string more_info = 3;
  if (has_more_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->more_info().data(), this->more_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "more_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->more_info(), output);
  }

  // optional string target_details = 4;
  if (has_target_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_details().data(), this->target_details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_details");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->target_details(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScienceGoals)
}

::google::protobuf::uint8* ScienceGoals::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScienceGoals)
  // optional double frequence = 1;
  if (has_frequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->frequence(), target);
  }

  // optional string instrument_configurations = 2;
  if (has_instrument_configurations()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrument_configurations().data(), this->instrument_configurations().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instrument_configurations");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instrument_configurations(), target);
  }

  // optional string more_info = 3;
  if (has_more_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->more_info().data(), this->more_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "more_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->more_info(), target);
  }

  // optional string target_details = 4;
  if (has_target_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_details().data(), this->target_details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_details");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->target_details(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScienceGoals)
  return target;
}

int ScienceGoals::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double frequence = 1;
    if (has_frequence()) {
      total_size += 1 + 8;
    }

    // optional string instrument_configurations = 2;
    if (has_instrument_configurations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_configurations());
    }

    // optional string more_info = 3;
    if (has_more_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->more_info());
    }

    // optional string target_details = 4;
    if (has_target_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_details());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScienceGoals::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScienceGoals* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScienceGoals*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScienceGoals::MergeFrom(const ScienceGoals& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frequence()) {
      set_frequence(from.frequence());
    }
    if (from.has_instrument_configurations()) {
      set_instrument_configurations(from.instrument_configurations());
    }
    if (from.has_more_info()) {
      set_more_info(from.more_info());
    }
    if (from.has_target_details()) {
      set_target_details(from.target_details());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScienceGoals::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScienceGoals::CopyFrom(const ScienceGoals& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScienceGoals::IsInitialized() const {

  return true;
}

void ScienceGoals::Swap(ScienceGoals* other) {
  if (other != this) {
    std::swap(frequence_, other->frequence_);
    std::swap(instrument_configurations_, other->instrument_configurations_);
    std::swap(more_info_, other->more_info_);
    std::swap(target_details_, other->target_details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScienceGoals::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScienceGoals_descriptor_;
  metadata.reflection = ScienceGoals_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

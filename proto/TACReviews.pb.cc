// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TACReviews.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TACReviews.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TACReviews_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TACReviews_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TACReviews_2eproto() {
  protobuf_AddDesc_TACReviews_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TACReviews.proto");
  GOOGLE_CHECK(file != NULL);
  TACReviews_descriptor_ = file->message_type(0);
  static const int TACReviews_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TACReviews, comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TACReviews, final_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TACReviews, tac_id_),
  };
  TACReviews_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TACReviews_descriptor_,
      TACReviews::default_instance_,
      TACReviews_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TACReviews, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TACReviews, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TACReviews));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TACReviews_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TACReviews_descriptor_, &TACReviews::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TACReviews_2eproto() {
  delete TACReviews::default_instance_;
  delete TACReviews_reflection_;
}

void protobuf_AddDesc_TACReviews_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020TACReviews.proto\"C\n\nTACReviews\022\020\n\010comm"
    "ents\030\001 \001(\t\022\023\n\013final_grade\030\002 \001(\t\022\016\n\006tac_i"
    "d\030\003 \001(\003", 87);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TACReviews.proto", &protobuf_RegisterTypes);
  TACReviews::default_instance_ = new TACReviews();
  TACReviews::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TACReviews_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TACReviews_2eproto {
  StaticDescriptorInitializer_TACReviews_2eproto() {
    protobuf_AddDesc_TACReviews_2eproto();
  }
} static_descriptor_initializer_TACReviews_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TACReviews::kCommentsFieldNumber;
const int TACReviews::kFinalGradeFieldNumber;
const int TACReviews::kTacIdFieldNumber;
#endif  // !_MSC_VER

TACReviews::TACReviews()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TACReviews)
}

void TACReviews::InitAsDefaultInstance() {
}

TACReviews::TACReviews(const TACReviews& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TACReviews)
}

void TACReviews::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  comments_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_grade_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tac_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TACReviews::~TACReviews() {
  // @@protoc_insertion_point(destructor:TACReviews)
  SharedDtor();
}

void TACReviews::SharedDtor() {
  if (comments_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comments_;
  }
  if (final_grade_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete final_grade_;
  }
  if (this != default_instance_) {
  }
}

void TACReviews::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TACReviews::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TACReviews_descriptor_;
}

const TACReviews& TACReviews::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TACReviews_2eproto();
  return *default_instance_;
}

TACReviews* TACReviews::default_instance_ = NULL;

TACReviews* TACReviews::New() const {
  return new TACReviews;
}

void TACReviews::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_comments()) {
      if (comments_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comments_->clear();
      }
    }
    if (has_final_grade()) {
      if (final_grade_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        final_grade_->clear();
      }
    }
    tac_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TACReviews::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TACReviews)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string comments = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comments()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comments().data(), this->comments().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comments");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_final_grade;
        break;
      }

      // optional string final_grade = 2;
      case 2: {
        if (tag == 18) {
         parse_final_grade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_final_grade()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->final_grade().data(), this->final_grade().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "final_grade");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tac_id;
        break;
      }

      // optional int64 tac_id = 3;
      case 3: {
        if (tag == 24) {
         parse_tac_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tac_id_)));
          set_has_tac_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TACReviews)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TACReviews)
  return false;
#undef DO_
}

void TACReviews::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TACReviews)
  // optional string comments = 1;
  if (has_comments()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comments");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->comments(), output);
  }

  // optional string final_grade = 2;
  if (has_final_grade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->final_grade().data(), this->final_grade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "final_grade");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->final_grade(), output);
  }

  // optional int64 tac_id = 3;
  if (has_tac_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->tac_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TACReviews)
}

::google::protobuf::uint8* TACReviews::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TACReviews)
  // optional string comments = 1;
  if (has_comments()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comments");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->comments(), target);
  }

  // optional string final_grade = 2;
  if (has_final_grade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->final_grade().data(), this->final_grade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "final_grade");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->final_grade(), target);
  }

  // optional int64 tac_id = 3;
  if (has_tac_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->tac_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TACReviews)
  return target;
}

int TACReviews::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string comments = 1;
    if (has_comments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comments());
    }

    // optional string final_grade = 2;
    if (has_final_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->final_grade());
    }

    // optional int64 tac_id = 3;
    if (has_tac_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tac_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TACReviews::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TACReviews* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TACReviews*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TACReviews::MergeFrom(const TACReviews& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comments()) {
      set_comments(from.comments());
    }
    if (from.has_final_grade()) {
      set_final_grade(from.final_grade());
    }
    if (from.has_tac_id()) {
      set_tac_id(from.tac_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TACReviews::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TACReviews::CopyFrom(const TACReviews& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TACReviews::IsInitialized() const {

  return true;
}

void TACReviews::Swap(TACReviews* other) {
  if (other != this) {
    std::swap(comments_, other->comments_);
    std::swap(final_grade_, other->final_grade_);
    std::swap(tac_id_, other->tac_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TACReviews::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TACReviews_descriptor_;
  metadata.reflection = TACReviews_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SupportingDocuments.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SupportingDocuments.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SupportingDocuments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SupportingDocuments_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SupportingDocuments_2eproto() {
  protobuf_AddDesc_SupportingDocuments_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SupportingDocuments.proto");
  GOOGLE_CHECK(file != NULL);
  SupportingDocuments_descriptor_ = file->message_type(0);
  static const int SupportingDocuments_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportingDocuments, preprints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportingDocuments, scientific_justification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportingDocuments, technical_justification_),
  };
  SupportingDocuments_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SupportingDocuments_descriptor_,
      SupportingDocuments::default_instance_,
      SupportingDocuments_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportingDocuments, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportingDocuments, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SupportingDocuments));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SupportingDocuments_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SupportingDocuments_descriptor_, &SupportingDocuments::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SupportingDocuments_2eproto() {
  delete SupportingDocuments::default_instance_;
  delete SupportingDocuments_reflection_;
}

void protobuf_AddDesc_SupportingDocuments_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031SupportingDocuments.proto\"k\n\023Supportin"
    "gDocuments\022\021\n\tpreprints\030\001 \001(\t\022 \n\030scienti"
    "fic_justification\030\002 \001(\t\022\037\n\027technical_jus"
    "tification\030\003 \001(\t", 136);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SupportingDocuments.proto", &protobuf_RegisterTypes);
  SupportingDocuments::default_instance_ = new SupportingDocuments();
  SupportingDocuments::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SupportingDocuments_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SupportingDocuments_2eproto {
  StaticDescriptorInitializer_SupportingDocuments_2eproto() {
    protobuf_AddDesc_SupportingDocuments_2eproto();
  }
} static_descriptor_initializer_SupportingDocuments_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SupportingDocuments::kPreprintsFieldNumber;
const int SupportingDocuments::kScientificJustificationFieldNumber;
const int SupportingDocuments::kTechnicalJustificationFieldNumber;
#endif  // !_MSC_VER

SupportingDocuments::SupportingDocuments()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SupportingDocuments)
}

void SupportingDocuments::InitAsDefaultInstance() {
}

SupportingDocuments::SupportingDocuments(const SupportingDocuments& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SupportingDocuments)
}

void SupportingDocuments::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  preprints_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scientific_justification_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_justification_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SupportingDocuments::~SupportingDocuments() {
  // @@protoc_insertion_point(destructor:SupportingDocuments)
  SharedDtor();
}

void SupportingDocuments::SharedDtor() {
  if (preprints_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preprints_;
  }
  if (scientific_justification_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scientific_justification_;
  }
  if (technical_justification_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete technical_justification_;
  }
  if (this != default_instance_) {
  }
}

void SupportingDocuments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SupportingDocuments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SupportingDocuments_descriptor_;
}

const SupportingDocuments& SupportingDocuments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SupportingDocuments_2eproto();
  return *default_instance_;
}

SupportingDocuments* SupportingDocuments::default_instance_ = NULL;

SupportingDocuments* SupportingDocuments::New() const {
  return new SupportingDocuments;
}

void SupportingDocuments::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_preprints()) {
      if (preprints_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        preprints_->clear();
      }
    }
    if (has_scientific_justification()) {
      if (scientific_justification_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scientific_justification_->clear();
      }
    }
    if (has_technical_justification()) {
      if (technical_justification_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        technical_justification_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SupportingDocuments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SupportingDocuments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string preprints = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preprints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preprints().data(), this->preprints().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "preprints");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scientific_justification;
        break;
      }

      // optional string scientific_justification = 2;
      case 2: {
        if (tag == 18) {
         parse_scientific_justification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scientific_justification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scientific_justification().data(), this->scientific_justification().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scientific_justification");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_technical_justification;
        break;
      }

      // optional string technical_justification = 3;
      case 3: {
        if (tag == 26) {
         parse_technical_justification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_technical_justification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->technical_justification().data(), this->technical_justification().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "technical_justification");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SupportingDocuments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SupportingDocuments)
  return false;
#undef DO_
}

void SupportingDocuments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SupportingDocuments)
  // optional string preprints = 1;
  if (has_preprints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preprints().data(), this->preprints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preprints");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->preprints(), output);
  }

  // optional string scientific_justification = 2;
  if (has_scientific_justification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scientific_justification().data(), this->scientific_justification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scientific_justification");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->scientific_justification(), output);
  }

  // optional string technical_justification = 3;
  if (has_technical_justification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->technical_justification().data(), this->technical_justification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "technical_justification");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->technical_justification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SupportingDocuments)
}

::google::protobuf::uint8* SupportingDocuments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SupportingDocuments)
  // optional string preprints = 1;
  if (has_preprints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preprints().data(), this->preprints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "preprints");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->preprints(), target);
  }

  // optional string scientific_justification = 2;
  if (has_scientific_justification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scientific_justification().data(), this->scientific_justification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scientific_justification");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scientific_justification(), target);
  }

  // optional string technical_justification = 3;
  if (has_technical_justification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->technical_justification().data(), this->technical_justification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "technical_justification");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->technical_justification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SupportingDocuments)
  return target;
}

int SupportingDocuments::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string preprints = 1;
    if (has_preprints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preprints());
    }

    // optional string scientific_justification = 2;
    if (has_scientific_justification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scientific_justification());
    }

    // optional string technical_justification = 3;
    if (has_technical_justification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->technical_justification());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SupportingDocuments::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SupportingDocuments* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SupportingDocuments*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SupportingDocuments::MergeFrom(const SupportingDocuments& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_preprints()) {
      set_preprints(from.preprints());
    }
    if (from.has_scientific_justification()) {
      set_scientific_justification(from.scientific_justification());
    }
    if (from.has_technical_justification()) {
      set_technical_justification(from.technical_justification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SupportingDocuments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupportingDocuments::CopyFrom(const SupportingDocuments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportingDocuments::IsInitialized() const {

  return true;
}

void SupportingDocuments::Swap(SupportingDocuments* other) {
  if (other != this) {
    std::swap(preprints_, other->preprints_);
    std::swap(scientific_justification_, other->scientific_justification_);
    std::swap(technical_justification_, other->technical_justification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SupportingDocuments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SupportingDocuments_descriptor_;
  metadata.reflection = SupportingDocuments_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

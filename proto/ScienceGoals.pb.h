// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ScienceGoals.proto

#ifndef PROTOBUF_ScienceGoals_2eproto__INCLUDED
#define PROTOBUF_ScienceGoals_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ScienceGoals_2eproto();
void protobuf_AssignDesc_ScienceGoals_2eproto();
void protobuf_ShutdownFile_ScienceGoals_2eproto();

class ScienceGoals;

// ===================================================================

class ScienceGoals : public ::google::protobuf::Message {
 public:
  ScienceGoals();
  virtual ~ScienceGoals();

  ScienceGoals(const ScienceGoals& from);

  inline ScienceGoals& operator=(const ScienceGoals& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScienceGoals& default_instance();

  void Swap(ScienceGoals* other);

  // implements Message ----------------------------------------------

  ScienceGoals* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScienceGoals& from);
  void MergeFrom(const ScienceGoals& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double frequence = 1;
  inline bool has_frequence() const;
  inline void clear_frequence();
  static const int kFrequenceFieldNumber = 1;
  inline double frequence() const;
  inline void set_frequence(double value);

  // optional string instrument_configurations = 2;
  inline bool has_instrument_configurations() const;
  inline void clear_instrument_configurations();
  static const int kInstrumentConfigurationsFieldNumber = 2;
  inline const ::std::string& instrument_configurations() const;
  inline void set_instrument_configurations(const ::std::string& value);
  inline void set_instrument_configurations(const char* value);
  inline void set_instrument_configurations(const char* value, size_t size);
  inline ::std::string* mutable_instrument_configurations();
  inline ::std::string* release_instrument_configurations();
  inline void set_allocated_instrument_configurations(::std::string* instrument_configurations);

  // optional string more_info = 3;
  inline bool has_more_info() const;
  inline void clear_more_info();
  static const int kMoreInfoFieldNumber = 3;
  inline const ::std::string& more_info() const;
  inline void set_more_info(const ::std::string& value);
  inline void set_more_info(const char* value);
  inline void set_more_info(const char* value, size_t size);
  inline ::std::string* mutable_more_info();
  inline ::std::string* release_more_info();
  inline void set_allocated_more_info(::std::string* more_info);

  // optional string target_details = 4;
  inline bool has_target_details() const;
  inline void clear_target_details();
  static const int kTargetDetailsFieldNumber = 4;
  inline const ::std::string& target_details() const;
  inline void set_target_details(const ::std::string& value);
  inline void set_target_details(const char* value);
  inline void set_target_details(const char* value, size_t size);
  inline ::std::string* mutable_target_details();
  inline ::std::string* release_target_details();
  inline void set_allocated_target_details(::std::string* target_details);

  // @@protoc_insertion_point(class_scope:ScienceGoals)
 private:
  inline void set_has_frequence();
  inline void clear_has_frequence();
  inline void set_has_instrument_configurations();
  inline void clear_has_instrument_configurations();
  inline void set_has_more_info();
  inline void clear_has_more_info();
  inline void set_has_target_details();
  inline void clear_has_target_details();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double frequence_;
  ::std::string* instrument_configurations_;
  ::std::string* more_info_;
  ::std::string* target_details_;
  friend void  protobuf_AddDesc_ScienceGoals_2eproto();
  friend void protobuf_AssignDesc_ScienceGoals_2eproto();
  friend void protobuf_ShutdownFile_ScienceGoals_2eproto();

  void InitAsDefaultInstance();
  static ScienceGoals* default_instance_;
};
// ===================================================================


// ===================================================================

// ScienceGoals

// optional double frequence = 1;
inline bool ScienceGoals::has_frequence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScienceGoals::set_has_frequence() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScienceGoals::clear_has_frequence() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScienceGoals::clear_frequence() {
  frequence_ = 0;
  clear_has_frequence();
}
inline double ScienceGoals::frequence() const {
  // @@protoc_insertion_point(field_get:ScienceGoals.frequence)
  return frequence_;
}
inline void ScienceGoals::set_frequence(double value) {
  set_has_frequence();
  frequence_ = value;
  // @@protoc_insertion_point(field_set:ScienceGoals.frequence)
}

// optional string instrument_configurations = 2;
inline bool ScienceGoals::has_instrument_configurations() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScienceGoals::set_has_instrument_configurations() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScienceGoals::clear_has_instrument_configurations() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScienceGoals::clear_instrument_configurations() {
  if (instrument_configurations_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instrument_configurations_->clear();
  }
  clear_has_instrument_configurations();
}
inline const ::std::string& ScienceGoals::instrument_configurations() const {
  // @@protoc_insertion_point(field_get:ScienceGoals.instrument_configurations)
  return *instrument_configurations_;
}
inline void ScienceGoals::set_instrument_configurations(const ::std::string& value) {
  set_has_instrument_configurations();
  if (instrument_configurations_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instrument_configurations_ = new ::std::string;
  }
  instrument_configurations_->assign(value);
  // @@protoc_insertion_point(field_set:ScienceGoals.instrument_configurations)
}
inline void ScienceGoals::set_instrument_configurations(const char* value) {
  set_has_instrument_configurations();
  if (instrument_configurations_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instrument_configurations_ = new ::std::string;
  }
  instrument_configurations_->assign(value);
  // @@protoc_insertion_point(field_set_char:ScienceGoals.instrument_configurations)
}
inline void ScienceGoals::set_instrument_configurations(const char* value, size_t size) {
  set_has_instrument_configurations();
  if (instrument_configurations_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instrument_configurations_ = new ::std::string;
  }
  instrument_configurations_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ScienceGoals.instrument_configurations)
}
inline ::std::string* ScienceGoals::mutable_instrument_configurations() {
  set_has_instrument_configurations();
  if (instrument_configurations_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instrument_configurations_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ScienceGoals.instrument_configurations)
  return instrument_configurations_;
}
inline ::std::string* ScienceGoals::release_instrument_configurations() {
  clear_has_instrument_configurations();
  if (instrument_configurations_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = instrument_configurations_;
    instrument_configurations_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ScienceGoals::set_allocated_instrument_configurations(::std::string* instrument_configurations) {
  if (instrument_configurations_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instrument_configurations_;
  }
  if (instrument_configurations) {
    set_has_instrument_configurations();
    instrument_configurations_ = instrument_configurations;
  } else {
    clear_has_instrument_configurations();
    instrument_configurations_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ScienceGoals.instrument_configurations)
}

// optional string more_info = 3;
inline bool ScienceGoals::has_more_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScienceGoals::set_has_more_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScienceGoals::clear_has_more_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScienceGoals::clear_more_info() {
  if (more_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    more_info_->clear();
  }
  clear_has_more_info();
}
inline const ::std::string& ScienceGoals::more_info() const {
  // @@protoc_insertion_point(field_get:ScienceGoals.more_info)
  return *more_info_;
}
inline void ScienceGoals::set_more_info(const ::std::string& value) {
  set_has_more_info();
  if (more_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    more_info_ = new ::std::string;
  }
  more_info_->assign(value);
  // @@protoc_insertion_point(field_set:ScienceGoals.more_info)
}
inline void ScienceGoals::set_more_info(const char* value) {
  set_has_more_info();
  if (more_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    more_info_ = new ::std::string;
  }
  more_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:ScienceGoals.more_info)
}
inline void ScienceGoals::set_more_info(const char* value, size_t size) {
  set_has_more_info();
  if (more_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    more_info_ = new ::std::string;
  }
  more_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ScienceGoals.more_info)
}
inline ::std::string* ScienceGoals::mutable_more_info() {
  set_has_more_info();
  if (more_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    more_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ScienceGoals.more_info)
  return more_info_;
}
inline ::std::string* ScienceGoals::release_more_info() {
  clear_has_more_info();
  if (more_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = more_info_;
    more_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ScienceGoals::set_allocated_more_info(::std::string* more_info) {
  if (more_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete more_info_;
  }
  if (more_info) {
    set_has_more_info();
    more_info_ = more_info;
  } else {
    clear_has_more_info();
    more_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ScienceGoals.more_info)
}

// optional string target_details = 4;
inline bool ScienceGoals::has_target_details() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScienceGoals::set_has_target_details() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScienceGoals::clear_has_target_details() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScienceGoals::clear_target_details() {
  if (target_details_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_details_->clear();
  }
  clear_has_target_details();
}
inline const ::std::string& ScienceGoals::target_details() const {
  // @@protoc_insertion_point(field_get:ScienceGoals.target_details)
  return *target_details_;
}
inline void ScienceGoals::set_target_details(const ::std::string& value) {
  set_has_target_details();
  if (target_details_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_details_ = new ::std::string;
  }
  target_details_->assign(value);
  // @@protoc_insertion_point(field_set:ScienceGoals.target_details)
}
inline void ScienceGoals::set_target_details(const char* value) {
  set_has_target_details();
  if (target_details_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_details_ = new ::std::string;
  }
  target_details_->assign(value);
  // @@protoc_insertion_point(field_set_char:ScienceGoals.target_details)
}
inline void ScienceGoals::set_target_details(const char* value, size_t size) {
  set_has_target_details();
  if (target_details_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_details_ = new ::std::string;
  }
  target_details_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ScienceGoals.target_details)
}
inline ::std::string* ScienceGoals::mutable_target_details() {
  set_has_target_details();
  if (target_details_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_details_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ScienceGoals.target_details)
  return target_details_;
}
inline ::std::string* ScienceGoals::release_target_details() {
  clear_has_target_details();
  if (target_details_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = target_details_;
    target_details_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ScienceGoals::set_allocated_target_details(::std::string* target_details) {
  if (target_details_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_details_;
  }
  if (target_details) {
    set_has_target_details();
    target_details_ = target_details;
  } else {
    clear_has_target_details();
    target_details_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ScienceGoals.target_details)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ScienceGoals_2eproto__INCLUDED

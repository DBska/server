// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PHTmessage.proto

#ifndef PROTOBUF_PHTmessage_2eproto__INCLUDED
#define PROTOBUF_PHTmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Proposals.pb.h"
// @@protoc_insertion_point(includes)

namespace PHT {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PHTmessage_2eproto();
void protobuf_AssignDesc_PHTmessage_2eproto();
void protobuf_ShutdownFile_PHTmessage_2eproto();

class PHTmessage;

enum PHTmessage_MessageType {
  PHTmessage_MessageType_DATA = 1,
  PHTmessage_MessageType_QUERY = 2,
  PHTmessage_MessageType_ANSWER = 3
};
bool PHTmessage_MessageType_IsValid(int value);
const PHTmessage_MessageType PHTmessage_MessageType_MessageType_MIN = PHTmessage_MessageType_DATA;
const PHTmessage_MessageType PHTmessage_MessageType_MessageType_MAX = PHTmessage_MessageType_ANSWER;
const int PHTmessage_MessageType_MessageType_ARRAYSIZE = PHTmessage_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PHTmessage_MessageType_descriptor();
inline const ::std::string& PHTmessage_MessageType_Name(PHTmessage_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PHTmessage_MessageType_descriptor(), value);
}
inline bool PHTmessage_MessageType_Parse(
    const ::std::string& name, PHTmessage_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PHTmessage_MessageType>(
    PHTmessage_MessageType_descriptor(), name, value);
}
// ===================================================================

class PHTmessage : public ::google::protobuf::Message {
 public:
  PHTmessage();
  virtual ~PHTmessage();

  PHTmessage(const PHTmessage& from);

  inline PHTmessage& operator=(const PHTmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PHTmessage& default_instance();

  void Swap(PHTmessage* other);

  // implements Message ----------------------------------------------

  PHTmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PHTmessage& from);
  void MergeFrom(const PHTmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PHTmessage_MessageType MessageType;
  static const MessageType DATA = PHTmessage_MessageType_DATA;
  static const MessageType QUERY = PHTmessage_MessageType_QUERY;
  static const MessageType ANSWER = PHTmessage_MessageType_ANSWER;
  static inline bool MessageType_IsValid(int value) {
    return PHTmessage_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    PHTmessage_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    PHTmessage_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    PHTmessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return PHTmessage_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return PHTmessage_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return PHTmessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PHT.PHTmessage.MessageType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PHT::PHTmessage_MessageType type() const;
  inline void set_type(::PHT::PHTmessage_MessageType value);

  // optional .PHT.Proposals proposal = 2;
  inline bool has_proposal() const;
  inline void clear_proposal();
  static const int kProposalFieldNumber = 2;
  inline const ::PHT::Proposals& proposal() const;
  inline ::PHT::Proposals* mutable_proposal();
  inline ::PHT::Proposals* release_proposal();
  inline void set_allocated_proposal(::PHT::Proposals* proposal);

  // @@protoc_insertion_point(class_scope:PHT.PHTmessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_proposal();
  inline void clear_has_proposal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PHT::Proposals* proposal_;
  int type_;
  friend void  protobuf_AddDesc_PHTmessage_2eproto();
  friend void protobuf_AssignDesc_PHTmessage_2eproto();
  friend void protobuf_ShutdownFile_PHTmessage_2eproto();

  void InitAsDefaultInstance();
  static PHTmessage* default_instance_;
};
// ===================================================================


// ===================================================================

// PHTmessage

// required .PHT.PHTmessage.MessageType type = 1;
inline bool PHTmessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PHTmessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PHTmessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PHTmessage::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PHT::PHTmessage_MessageType PHTmessage::type() const {
  // @@protoc_insertion_point(field_get:PHT.PHTmessage.type)
  return static_cast< ::PHT::PHTmessage_MessageType >(type_);
}
inline void PHTmessage::set_type(::PHT::PHTmessage_MessageType value) {
  assert(::PHT::PHTmessage_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:PHT.PHTmessage.type)
}

// optional .PHT.Proposals proposal = 2;
inline bool PHTmessage::has_proposal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PHTmessage::set_has_proposal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PHTmessage::clear_has_proposal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PHTmessage::clear_proposal() {
  if (proposal_ != NULL) proposal_->::PHT::Proposals::Clear();
  clear_has_proposal();
}
inline const ::PHT::Proposals& PHTmessage::proposal() const {
  // @@protoc_insertion_point(field_get:PHT.PHTmessage.proposal)
  return proposal_ != NULL ? *proposal_ : *default_instance_->proposal_;
}
inline ::PHT::Proposals* PHTmessage::mutable_proposal() {
  set_has_proposal();
  if (proposal_ == NULL) proposal_ = new ::PHT::Proposals;
  // @@protoc_insertion_point(field_mutable:PHT.PHTmessage.proposal)
  return proposal_;
}
inline ::PHT::Proposals* PHTmessage::release_proposal() {
  clear_has_proposal();
  ::PHT::Proposals* temp = proposal_;
  proposal_ = NULL;
  return temp;
}
inline void PHTmessage::set_allocated_proposal(::PHT::Proposals* proposal) {
  delete proposal_;
  proposal_ = proposal;
  if (proposal) {
    set_has_proposal();
  } else {
    clear_has_proposal();
  }
  // @@protoc_insertion_point(field_set_allocated:PHT.PHTmessage.proposal)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PHT

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::PHT::PHTmessage_MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PHT::PHTmessage_MessageType>() {
  return ::PHT::PHTmessage_MessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PHTmessage_2eproto__INCLUDED
